12-09-2024

React -> Everything is JS (Logic + HTML)


Node JS? => Environment to run JS
npm => Node Package Manager


React JS JSX <CONVERT> Vanila JS -> Babel (Transpiler)
Angular <CONVERT> Vanilla JS
Vue JS <CONVERT> Vanilla JS

React Functional Component : IF a function in ReactJS is returning HTML, then we can not call it like MyFn() rather we call it like <MyFn></MyFn>
sum() => Normal fn returning any data type of js
<Sum> </Sum> => React fn returning html

<div>
</div>
<p>
</p>

<br> </br>
<input> </input>
<img> </img>

<br />
<input />
<img />

React JS Way of writing code JSX (JavaScript and XML)


Topics Covered Today :
1. Seperation of code in JS file
2. New react way (v18) to render the content on screen using createRoot
3. JSX along with Variables
4. Naming conventions
5. Babel (Transpiler)
6. Virtual DOM
--------------------------------------------------------------------------------

13-09-2024

1. Babel
2. Live Server
3. Webpack (Bundler), Minifier
4. React & ReactDOM
5. 1 html file with root div
6. React configuration

Boiler Plate => Ready made configured app for any Framework or library.

Create React App
Vite

const App = () => {} // App.js
root.render(<App />) // index.js



Create React App

npm install -g create-react-app
create-react-app <project_name>
cd <project_name>
npm start

OR

npx create-react-app <project_name>
cd <project_name>
npm start



Vite
npx create-vite@latest (After this command answer basic questions) type: React + JavaScript
cd <project_name>
npm install
npm run dev

16-09-2024

Export & Imports are required to use the components from a different file

1. Export -> The component to be used (At the end of the file)
2. Import -> The component to be used (At the starting of the file)

2 Types of exports
Default export -> When you have only 1 component / item to export from a file.
Named export -> When you have multiple components / items to exports from a file.

2 Types of CSS

Modular CSS => Specific to a component / Screen
Global CSS => Common CSS for the project

17-09-2024
largeTxt -> 30px (Content.module.css)
largeTxt -> 80px (Copyright)


Props : Dynamic data (arguments) passed to a component in the form of object
forEach and for() are not allowed inside jsx in react

19-09-2024
Render => To show something
Re-render => To show something again with updated values

 let [variableName, setterFunction] = useState(initial-value)

State => Manages the internal data of the component
Props => Are received form outside the component

Hooks => Special functions in react written to perform the updates or any side effect

useState
useEffect
useLayout
useCallback
useMemo
etc

20-09-2024
Conditional Rendering

Lifting up the state => Passing the data from child to parent, we pass a fn from parent to child as a prop, and the fn is called inside the child

24-09-2024
useEffect : hook to handle side effects

useEffect can be used in cases, where i want the operation to happen only 1 time in a component throughtout the lifecycle
Syntax : 
useEffect(callbackFn, dependencyArray)

If the values in the dependency array changes, it will run the callbackFn inside useEffect hook.

26-09-2024
Initial Render (Mounting Phase)
1. setTimeout => 3 sec => setter fn call => Re-render

Updation Phase
2. setTimeout =>  3 sec => setter fn call => Re-render
2. setTimeout =>  3 sec => setter fn call => Re-render
2. setTimeout =>  3 sec => setter fn call => Re-render
2. setTimeout =>  3 sec => setter fn call => Re-render
2. setTimeout =>  3 sec => setter fn call => Re-render
2. setTimeout =>  3 sec => setter fn call => Re-render
2. setTimeout =>  3 sec => setter fn call => Re-render
2. setTimeout =>  3 sec => setter fn call => Re-render
2. setTimeout =>  3 sec => setter fn call => Re-render
2. setTimeout =>  3 sec => setter fn call => Re-render
................


API (Application Programming Interface) => Connector / bridge between 2 parties

Front End (Client)
Back End (Server)

Back End (Server)
Back End (Server)

Data Type : JSON

Methods of APIs
1. GET => Get the data from server (Get the list of products, social media feeds, user profile etc)
2. POST => Send some data to the server (Submitting enquriy form, User Registration / Signup, Creating a new post / blog, Placing an order)

Request -> Response

27-09-2024

Pre requisits To call an API
1. API URL / Link  (API End Point)
2. HTTP Method (GET / POST etc)
3. Request Body : {}

API => HTTP Request
2 Parts
    1. Header
    2. Body

01-10-2024

Hosting / Deploying => Putting the webapp on internet for use

1 Babel
2 Webpack (Merge and minify)


2 Options to deploy
1. Manually build the code and upload the build on hosting platform
2. Find a hosting website that builds the code for us and upload it


// Fin the index with the help of id
array.splice(<index of item to perfrom operation>, <no of items to delete>, ...<item to insert>)

    
<button onClick={() => onDelete(uniqueId)}>Delete</button>


showMessage("Item addes successfully")

Sugar abc123
Flour xyz234
Chocolate fd2
Soap gf5

Sugar 0
Chocolate 1
Soap 2

Sugar abc123
Chocolate fd2
Soap gf5
